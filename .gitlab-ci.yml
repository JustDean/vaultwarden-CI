# METAINFO
stages:
  - lint
  - build
  - deploy-test
  - deploy-prod

variables:
  HELM_IMAGE: dtzar/helm-kubectl:3.10.0
  DOMAIN: .dolinskiydmitri-577.metaclass-st.ru
  IMAGE: $CI_REGISTRY_IMAGE
  VERSION: $CI_PIPELINE_IID

# STAGES
Lint helm:
  stage: lint
  image: $HELM_IMAGE
  script:
    - helm lint .kube/vaultwarden

Build:
  stage: build
  needs:
    - Lint helm
  image: docker:20.10.21
  services:
    - docker:20.10.21-dind
  before_script:
    - i=0; while [ "$i" -lt 12 ]; do docker info && break; sleep 5; i=$(( i + 1 )) ; done
    - docker login $CI_REGISTRY -u gitlab-ci-token -p $CI_BUILD_TOKEN
  script:
    - docker build -t $IMAGE:$VERSION .
    - docker push ${IMAGE}:${VERSION}

.deploy_chart:
  before_script:
    - kubectl create namespace ${NAMESPACE} || true
    - >
      kubectl -n ${NAMESPACE} create secret docker-registry registry-credentials 
      --docker-server=${CI_REGISTRY} 
      --docker-username=${CI_DEPLOY_USER} 
      --docker-password=${CI_DEPLOY_PASSWORD} || true
  script:
    - >
      helm -n $NAMESPACE upgrade
      --set fullnameOverride=$NAMESPACE
      --set vaultwarden.image.repository=$IMAGE
      --set vaultwarden.image.tag=$VERSION
      --set vaultwarden.ingress.domain=${NAMESPACE}${DOMAIN}
      --set vaultwarden.ingress.tls.secretName=${NAMESPACE}-tls
      --set vaultwarden.admin.token=${ADMIN_TOKEN}
      --set vaultwarden.admin.basicAuth.password=${ADMIN_PASSWORD}
      --set pg.password=${POSTGRES_PASSWORD}
      --set pg.persist.enabled=${PERSIST_STATUS}
      --install $NAMESPACE .kube/vaultwarden
      --wait

Deploy Test:
  stage: deploy-test
  extends: .deploy_chart
  needs:
    - Build
  environment:
    name: test
    on_stop: Stop Test
  image: $HELM_IMAGE

Stop Test:
  stage: deploy-test
  when: manual
  needs:
    - Deploy Test
  environment:
    name: test
    action: stop
  image: $HELM_IMAGE
  script:
    - helm -n $NAMESPACE uninstall $NAMESPACE --wait

Deploy Prod:
  stage: deploy-prod
  extends: .deploy_chart
  when: manual
  needs:
    - Build
  environment:
    name: prod
  image: $HELM_IMAGE
